import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import torch
from ultralytics import YOLO
from io import StringIO
import cv2
import requests
from PIL import Image
from io import BytesIO

# –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É —á–µ–ª–æ–≤–µ–∫–∞/–ª—é–¥–µ–π –∏ –±—Ä—é–ª–∏—Ç—å –∏–º –ª–∏—Ü–∞.

# 0. –ú–æ–¥—É–ª—å –∫–æ–¥–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∞–º–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –∏ –º–æ–¥–µ–ª–∏

model_final = YOLO("./models/model_2/best_2.pt")

# 1. –î–µ–ª–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞.
st.badge('üö® powered by EugeneOss üö®')
st.title('–î–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–∑–º—ã—Ç—å –ª–∏—Ü–∞ –Ω–∞ –ª—é–±–æ–º —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –¥–æ–±–∞–≤–ª—è–µ—Ç–µ —á–µ—Ä–µ–∑ URL –∏–ª–∏ –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞')

st.link_button("–í–∞—à –º–æ–¥–µ–ª—å–µ—Ä", "https://t.me/Eugene_Os")



# 2. –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞

option_map = {
    0: "–ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ",
    1: "–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π —Å—Ä–∞–∑—É",
    2: "–ó–∞–≥—Ä—É–∑–∏ –ø–æ —Å—Å—ã–ª–∫—É",
}

st.write('''
## –í—ã–±–µ—Ä–∏ –º–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–æ–¥–µ–ª—å
''')

selection = st.segmented_control(
    "",
    options=option_map.keys(),
    format_func=lambda option: option_map[option],
    selection_mode="single",
)

if selection == 0:
    browse = st.file_uploader('–í—ã–±–µ—Ä–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É', type=["jpg", "jpeg", "png"], accept_multiple_files=False)
    if browse is not None:
        with open("saved_image.png", "wb") as f:
            f.write(browse.read())
        image = cv2.imread("saved_image.png")
        results = model_final(image)[0]
        blurred_img = image.copy()
        for box in results.boxes.xyxy.cpu().numpy():
            x1, y1, x2, y2 = box.astype(int)
            face_roi = blurred_img[y1:y2, x1:x2]
            face_blur = cv2.GaussianBlur(face_roi, (35, 35), 30)
            blurred_img[y1:y2, x1:x2] = face_blur
        st.image(blurred_img[:, :, ::-1])
        
        _, buffer = cv2.imencode(".jpg", blurred_img)
        img_bytes = BytesIO(buffer.tobytes())

        st.download_button(
            label='–°–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
            file_name='faces_blurred.jpg',
            mime="image/jpeg",
            data=img_bytes
            )

elif selection == 1:
    checkbox = st.checkbox('–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ')
    if checkbox is True:
        browse = st.camera_input('–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å')
        if browse is not None:
            with open("saved_image.png", "wb") as f:
                f.write(browse.read())
            image = cv2.imread("saved_image.png")
            results = model_final(image)[0]
            blurred_img = image.copy()
            for box in results.boxes.xyxy.cpu().numpy():
                x1, y1, x2, y2 = box.astype(int)
                face_roi = blurred_img[y1:y2, x1:x2]
                face_blur = cv2.GaussianBlur(face_roi, (35, 35), 30)
                blurred_img[y1:y2, x1:x2] = face_blur
            st.image(blurred_img[:, :, ::-1])

            _, buffer = cv2.imencode(".jpg", blurred_img)
            img_bytes = BytesIO(buffer.tobytes())

            st.download_button(
            label='–°–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
            file_name='faces_blurred.jpg',
            mime="image/jpeg",
            data=img_bytes
            )

elif selection == 2:
    urls = st.text_input('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É')
    if urls:
        try:
            response = requests.get(urls, timeout=5)
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏ Content-Type
            content_type = response.headers.get("Content-Type", "")
            if "image" in content_type:
                browse = Image.open(BytesIO(response.content))
                with open("saved_image.png", "wb") as f:
                    f.write(response.content)
                image = cv2.imread("saved_image.png")
                results = model_final(image)[0]
                blurred_img = image.copy()
                for box in results.boxes.xyxy.cpu().numpy():
                    x1, y1, x2, y2 = box.astype(int)
                    face_roi = blurred_img[y1:y2, x1:x2]
                    face_blur = cv2.GaussianBlur(face_roi, (35, 35), 30)
                    blurred_img[y1:y2, x1:x2] = face_blur
                st.image(blurred_img[:, :, ::-1])

                _, buffer = cv2.imencode(".jpg", blurred_img)
                img_bytes = BytesIO(buffer.tobytes())

                st.download_button(
                label='–°–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
                file_name='faces_blurred.jpg',
                mime="image/jpeg",
                data=img_bytes
                )
            else:
                st.error("üö´ –≠—Ç–æ –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –≤–µ–¥—ë—Ç –Ω–∞ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .jpg, .png –∏ —Ç.–¥.")
        except Exception as e:
            st.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")


